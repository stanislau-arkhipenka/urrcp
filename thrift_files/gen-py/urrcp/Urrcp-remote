#!/usr/bin/env python
#
# Autogenerated by Thrift Compiler (0.9.1)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

import sys
import pprint
from urlparse import urlparse
from thrift.transport import TTransport
from thrift.transport import TSocket
from thrift.transport import THttpClient
from thrift.protocol import TBinaryProtocol

from urrcp import Urrcp
from urrcp.ttypes import *

if len(sys.argv) <= 1 or sys.argv[1] == '--help':
  print ''
  print 'Usage: ' + sys.argv[0] + ' [-h host[:port]] [-u url] [-f[ramed]] function [arg1 [arg2...]]'
  print ''
  print 'Functions:'
  print '  bool ping()'
  print '  string get_init_schema()'
  print '  void set_config(string config_name, string config_value)'
  print '  void set_device_position(string device_id, double value)'
  print '  void set_device_speed(string device_id, double value)'
  print '  void set_device_acceleration(string device_id, double value)'
  print ''
  sys.exit(0)

pp = pprint.PrettyPrinter(indent = 2)
host = 'localhost'
port = 9090
uri = ''
framed = False
http = False
argi = 1

if sys.argv[argi] == '-h':
  parts = sys.argv[argi+1].split(':')
  host = parts[0]
  if len(parts) > 1:
    port = int(parts[1])
  argi += 2

if sys.argv[argi] == '-u':
  url = urlparse(sys.argv[argi+1])
  parts = url[1].split(':')
  host = parts[0]
  if len(parts) > 1:
    port = int(parts[1])
  else:
    port = 80
  uri = url[2]
  if url[4]:
    uri += '?%s' % url[4]
  http = True
  argi += 2

if sys.argv[argi] == '-f' or sys.argv[argi] == '-framed':
  framed = True
  argi += 1

cmd = sys.argv[argi]
args = sys.argv[argi+1:]

if http:
  transport = THttpClient.THttpClient(host, port, uri)
else:
  socket = TSocket.TSocket(host, port)
  if framed:
    transport = TTransport.TFramedTransport(socket)
  else:
    transport = TTransport.TBufferedTransport(socket)
protocol = TBinaryProtocol.TBinaryProtocol(transport)
client = Urrcp.Client(protocol)
transport.open()

if cmd == 'ping':
  if len(args) != 0:
    print 'ping requires 0 args'
    sys.exit(1)
  pp.pprint(client.ping())

elif cmd == 'get_init_schema':
  if len(args) != 0:
    print 'get_init_schema requires 0 args'
    sys.exit(1)
  pp.pprint(client.get_init_schema())

elif cmd == 'set_config':
  if len(args) != 2:
    print 'set_config requires 2 args'
    sys.exit(1)
  pp.pprint(client.set_config(args[0],args[1],))

elif cmd == 'set_device_position':
  if len(args) != 2:
    print 'set_device_position requires 2 args'
    sys.exit(1)
  pp.pprint(client.set_device_position(args[0],eval(args[1]),))

elif cmd == 'set_device_speed':
  if len(args) != 2:
    print 'set_device_speed requires 2 args'
    sys.exit(1)
  pp.pprint(client.set_device_speed(args[0],eval(args[1]),))

elif cmd == 'set_device_acceleration':
  if len(args) != 2:
    print 'set_device_acceleration requires 2 args'
    sys.exit(1)
  pp.pprint(client.set_device_acceleration(args[0],eval(args[1]),))

else:
  print 'Unrecognized method %s' % cmd
  sys.exit(1)

transport.close()
